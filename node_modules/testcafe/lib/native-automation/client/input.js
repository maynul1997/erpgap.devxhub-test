"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const event_descriptor_1 = __importDefault(require("./event-descriptor"));
class NativeAutomationInput {
    constructor(dispatchEventFn) {
        this._dispatchEventFn = dispatchEventFn;
    }
    async mouseDown(options) {
        const eventOptions = await event_descriptor_1.default.createMouseEventOptions('mousePressed', options);
        return this._dispatchEventFn.single(types_1.EventType.Mouse, eventOptions);
    }
    async mouseUp(options) {
        const eventOptions = await event_descriptor_1.default.createMouseEventOptions('mouseReleased', options);
        return this._dispatchEventFn.single(types_1.EventType.Mouse, eventOptions);
    }
    keyDown(options) {
        const eventOptions = event_descriptor_1.default.createKeyDownOptions(options);
        return this._dispatchEventFn.single(types_1.EventType.Keyboard, eventOptions);
    }
    keyUp(options) {
        const eventOptions = event_descriptor_1.default.createKeyUpOptions(options);
        return this._dispatchEventFn.single(types_1.EventType.Keyboard, eventOptions);
    }
    executeEventSequence(eventSequence) {
        return this._dispatchEventFn.sequence(eventSequence);
    }
    async executeInsertText(text) {
        return this._dispatchEventFn.single(types_1.EventType.InsertText, { text });
    }
    async createMouseMoveEvent(currPosition) {
        const options = await event_descriptor_1.default.createMouseEventOptions('mouseMoved', {
            options: {
                clientX: currPosition.x,
                clientY: currPosition.y,
                button: 'none',
            },
        });
        return {
            type: types_1.EventType.Mouse,
            options,
        };
    }
}
exports.default = NativeAutomationInput;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmF0aXZlLWF1dG9tYXRpb24vY2xpZW50L2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0NBQXFDO0FBSXJDLDBFQUFvRDtBQUVwRCxNQUFxQixxQkFBcUI7SUFFdEMsWUFBYSxlQUFnQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0lBQzVDLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUyxDQUFFLE9BQVk7UUFDaEMsTUFBTSxZQUFZLEdBQUcsTUFBTSwwQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFFLE9BQVk7UUFDOUIsTUFBTSxZQUFZLEdBQUcsTUFBTSwwQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFaEcsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFTSxPQUFPLENBQUUsT0FBeUI7UUFDckMsTUFBTSxZQUFZLEdBQUcsMEJBQWtCLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEUsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFDTSxLQUFLLENBQUUsT0FBeUI7UUFDbkMsTUFBTSxZQUFZLEdBQUcsMEJBQWtCLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEUsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTSxvQkFBb0IsQ0FBRSxhQUFvQjtRQUM3QyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBRSxJQUFZO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxpQkFBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVNLEtBQUssQ0FBQyxvQkFBb0IsQ0FBRSxZQUFvQztRQUNuRSxNQUFNLE9BQU8sR0FBRyxNQUFNLDBCQUFrQixDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRTtZQUMzRSxPQUFPLEVBQUU7Z0JBQ0wsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUN2QixPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU0sRUFBRyxNQUFNO2FBQ2xCO1NBQ0osQ0FBQyxDQUFDO1FBRUgsT0FBTztZQUNILElBQUksRUFBRSxpQkFBUyxDQUFDLEtBQUs7WUFDckIsT0FBTztTQUNWLENBQUM7SUFDTixDQUFDO0NBQ0o7QUFuREQsd0NBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgQXhpc1ZhbHVlc0RhdGEgfSBmcm9tICcuLi8uLi9jbGllbnQvY29yZS91dGlscy92YWx1ZXMvYXhpcy12YWx1ZXMnO1xuaW1wb3J0IHsgU2ltdWxhdGVkS2V5SW5mbyB9IGZyb20gJy4va2V5LXByZXNzL3V0aWxzJztcbmltcG9ydCB7IERpc3BhdGNoRXZlbnRGbiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IENEUEV2ZW50RGVzY3JpcHRvciBmcm9tICcuL2V2ZW50LWRlc2NyaXB0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXRpdmVBdXRvbWF0aW9uSW5wdXQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rpc3BhdGNoRXZlbnRGbjogRGlzcGF0Y2hFdmVudEZuO1xuICAgIGNvbnN0cnVjdG9yIChkaXNwYXRjaEV2ZW50Rm46IERpc3BhdGNoRXZlbnRGbikge1xuICAgICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4gPSBkaXNwYXRjaEV2ZW50Rm47XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG1vdXNlRG93biAob3B0aW9uczogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IGF3YWl0IENEUEV2ZW50RGVzY3JpcHRvci5jcmVhdGVNb3VzZUV2ZW50T3B0aW9ucygnbW91c2VQcmVzc2VkJywgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoRXZlbnRGbi5zaW5nbGUoRXZlbnRUeXBlLk1vdXNlLCBldmVudE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBtb3VzZVVwIChvcHRpb25zOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZXZlbnRPcHRpb25zID0gYXdhaXQgQ0RQRXZlbnREZXNjcmlwdG9yLmNyZWF0ZU1vdXNlRXZlbnRPcHRpb25zKCdtb3VzZVJlbGVhc2VkJywgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoRXZlbnRGbi5zaW5nbGUoRXZlbnRUeXBlLk1vdXNlLCBldmVudE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBrZXlEb3duIChvcHRpb25zOiBTaW11bGF0ZWRLZXlJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IENEUEV2ZW50RGVzY3JpcHRvci5jcmVhdGVLZXlEb3duT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hFdmVudEZuLnNpbmdsZShFdmVudFR5cGUuS2V5Ym9hcmQsIGV2ZW50T3B0aW9ucyk7XG4gICAgfVxuICAgIHB1YmxpYyBrZXlVcCAob3B0aW9uczogU2ltdWxhdGVkS2V5SW5mbyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBldmVudE9wdGlvbnMgPSBDRFBFdmVudERlc2NyaXB0b3IuY3JlYXRlS2V5VXBPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4uc2luZ2xlKEV2ZW50VHlwZS5LZXlib2FyZCwgZXZlbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZXhlY3V0ZUV2ZW50U2VxdWVuY2UgKGV2ZW50U2VxdWVuY2U6IGFueVtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4uc2VxdWVuY2UoZXZlbnRTZXF1ZW5jZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGV4ZWN1dGVJbnNlcnRUZXh0ICh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hFdmVudEZuLnNpbmdsZShFdmVudFR5cGUuSW5zZXJ0VGV4dCwgeyB0ZXh0IH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjcmVhdGVNb3VzZU1vdmVFdmVudCAoY3VyclBvc2l0aW9uOiBBeGlzVmFsdWVzRGF0YTxudW1iZXI+KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGF3YWl0IENEUEV2ZW50RGVzY3JpcHRvci5jcmVhdGVNb3VzZUV2ZW50T3B0aW9ucygnbW91c2VNb3ZlZCcsIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjbGllbnRYOiBjdXJyUG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICBjbGllbnRZOiBjdXJyUG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgICBidXR0b246ICAnbm9uZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLk1vdXNlLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=