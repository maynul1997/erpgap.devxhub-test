"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFailRequest = exports.safeContinueRequest = exports.safeFulfillRequest = exports.safeContinueResponse = void 0;
const debug_loggers_1 = require("../../utils/debug-loggers");
const cdp_1 = require("../utils/cdp");
const INVALID_INTERCEPTED_RESPONSE_ERROR_MSG = 'Invalid InterceptionId.';
// In some cases (a request was aborted, any page that initiated the request doesn't exist, etc.)
// Chrome Debug Protocol doesn't allow to continue request pipeline
// and raises the "Invalid InterceptionId" error.
// We use the simplest way to fix it - omit such an error.
async function connectionResetGuard(handleRequestFn, handleErrorFn) {
    try {
        await handleRequestFn();
    }
    catch (err) {
        if (err.message === INVALID_INTERCEPTED_RESPONSE_ERROR_MSG)
            return;
        handleErrorFn(err);
        throw err;
    }
}
async function safeContinueResponse(client, data) {
    const isPausedEvent = (0, cdp_1.isRequestPausedEvent)(data);
    await connectionResetGuard(async () => {
        const param = isPausedEvent
            ? { requestId: data.requestId }
            : data;
        await client.Fetch.continueResponse(param);
    }, err => {
        const formatter = isPausedEvent ? '%r' : '%s';
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.continueResponse. Unhandled error %s during processing ${formatter}`, err, data);
    });
}
exports.safeContinueResponse = safeContinueResponse;
async function safeFulfillRequest(client, fulfillInfo) {
    await connectionResetGuard(async () => {
        await client.Fetch.fulfillRequest(fulfillInfo);
    }, err => {
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.fulfillRequest. Unhandled error %s during processing %s`, err, fulfillInfo.requestId);
    });
}
exports.safeFulfillRequest = safeFulfillRequest;
async function safeContinueRequest(client, event, postData) {
    await connectionResetGuard(async () => {
        await client.Fetch.continueRequest({ requestId: event.requestId, postData });
    }, err => {
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.continueRequest. Unhandled error %s during processing %r`, err, event);
    });
}
exports.safeContinueRequest = safeContinueRequest;
async function safeFailRequest(client, event, errorReason = 'Aborted') {
    await connectionResetGuard(async () => {
        await client.Fetch.failRequest({
            requestId: event.requestId,
            errorReason,
        });
    }, err => {
        (0, debug_loggers_1.requestPipelineLogger)(`Fetch.failRequest. Unhandled error %s during processing %s`, err, event.requestId);
    });
}
exports.safeFailRequest = safeFailRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FmZS1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmF0aXZlLWF1dG9tYXRpb24vcmVxdWVzdC1waXBlbGluZS9zYWZlLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2REFBa0U7QUFNbEUsc0NBQW9EO0FBRXBELE1BQU0sc0NBQXNDLEdBQUcseUJBQXlCLENBQUM7QUFFekUsaUdBQWlHO0FBQ2pHLG1FQUFtRTtBQUNuRSxpREFBaUQ7QUFDakQsMERBQTBEO0FBRTFELEtBQUssVUFBVSxvQkFBb0IsQ0FBRSxlQUFvQyxFQUFFLGFBQWlDO0lBQ3hHLElBQUk7UUFDQSxNQUFNLGVBQWUsRUFBRSxDQUFDO0tBQzNCO0lBQ0QsT0FBTyxHQUFRLEVBQUU7UUFDYixJQUFJLEdBQUcsQ0FBQyxPQUFPLEtBQUssc0NBQXNDO1lBQ3RELE9BQU87UUFFWCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkIsTUFBTSxHQUFHLENBQUM7S0FDYjtBQUNMLENBQUM7QUFFTSxLQUFLLFVBQVUsb0JBQW9CLENBQUUsTUFBbUIsRUFBRSxJQUFrRDtJQUMvRyxNQUFNLGFBQWEsR0FBRyxJQUFBLDBCQUFvQixFQUFDLElBQUksQ0FBQyxDQUFDO0lBRWpELE1BQU0sb0JBQW9CLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEMsTUFBTSxLQUFLLEdBQUcsYUFBYTtZQUN2QixDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUMvQixDQUFDLENBQUMsSUFBSSxDQUFDO1FBRVgsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUNMLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFOUMsSUFBQSxxQ0FBcUIsRUFBQyxnRUFBZ0UsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xILENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWRELG9EQWNDO0FBRU0sS0FBSyxVQUFVLGtCQUFrQixDQUFFLE1BQW1CLEVBQUUsV0FBa0M7SUFDN0YsTUFBTSxvQkFBb0IsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUNMLElBQUEscUNBQXFCLEVBQUMsK0RBQStELEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2SCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFORCxnREFNQztBQUVNLEtBQUssVUFBVSxtQkFBbUIsQ0FBRSxNQUFtQixFQUFFLEtBQXlCLEVBQUUsUUFBa0I7SUFDekcsTUFBTSxvQkFBb0IsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNqRixDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDTCxJQUFBLHFDQUFxQixFQUFDLGdFQUFnRSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4RyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFORCxrREFNQztBQUVNLEtBQUssVUFBVSxlQUFlLENBQUUsTUFBbUIsRUFBRSxLQUF5QixFQUFFLGNBQTJCLFNBQVM7SUFDdkgsTUFBTSxvQkFBb0IsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixXQUFXO1NBQ2QsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ0wsSUFBQSxxQ0FBcUIsRUFBQyw0REFBNEQsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlHLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVRELDBDQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdG9jb2xBcGkgfSBmcm9tICdjaHJvbWUtcmVtb3RlLWludGVyZmFjZSc7XG5pbXBvcnQgeyByZXF1ZXN0UGlwZWxpbmVMb2dnZXIgfSBmcm9tICcuLi8uLi91dGlscy9kZWJ1Zy1sb2dnZXJzJztcbmltcG9ydCBQcm90b2NvbCBmcm9tICdkZXZ0b29scy1wcm90b2NvbCc7XG5pbXBvcnQgUmVxdWVzdFBhdXNlZEV2ZW50ID0gUHJvdG9jb2wuRmV0Y2guUmVxdWVzdFBhdXNlZEV2ZW50O1xuaW1wb3J0IEZ1bGZpbGxSZXF1ZXN0UmVxdWVzdCA9IFByb3RvY29sLkZldGNoLkZ1bGZpbGxSZXF1ZXN0UmVxdWVzdDtcbmltcG9ydCBDb250aW51ZVJlc3BvbnNlUmVxdWVzdCA9IFByb3RvY29sLkZldGNoLkNvbnRpbnVlUmVzcG9uc2VSZXF1ZXN0O1xuaW1wb3J0IEVycm9yUmVhc29uID0gUHJvdG9jb2wuTmV0d29yay5FcnJvclJlYXNvbjtcbmltcG9ydCB7IGlzUmVxdWVzdFBhdXNlZEV2ZW50IH0gZnJvbSAnLi4vdXRpbHMvY2RwJztcblxuY29uc3QgSU5WQUxJRF9JTlRFUkNFUFRFRF9SRVNQT05TRV9FUlJPUl9NU0cgPSAnSW52YWxpZCBJbnRlcmNlcHRpb25JZC4nO1xuXG4vLyBJbiBzb21lIGNhc2VzIChhIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGFueSBwYWdlIHRoYXQgaW5pdGlhdGVkIHRoZSByZXF1ZXN0IGRvZXNuJ3QgZXhpc3QsIGV0Yy4pXG4vLyBDaHJvbWUgRGVidWcgUHJvdG9jb2wgZG9lc24ndCBhbGxvdyB0byBjb250aW51ZSByZXF1ZXN0IHBpcGVsaW5lXG4vLyBhbmQgcmFpc2VzIHRoZSBcIkludmFsaWQgSW50ZXJjZXB0aW9uSWRcIiBlcnJvci5cbi8vIFdlIHVzZSB0aGUgc2ltcGxlc3Qgd2F5IHRvIGZpeCBpdCAtIG9taXQgc3VjaCBhbiBlcnJvci5cblxuYXN5bmMgZnVuY3Rpb24gY29ubmVjdGlvblJlc2V0R3VhcmQgKGhhbmRsZVJlcXVlc3RGbjogKCkgPT4gUHJvbWlzZTx2b2lkPiwgaGFuZGxlRXJyb3JGbjogKGVycjogYW55KSA9PiB2b2lkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgaGFuZGxlUmVxdWVzdEZuKCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICBpZiAoZXJyLm1lc3NhZ2UgPT09IElOVkFMSURfSU5URVJDRVBURURfUkVTUE9OU0VfRVJST1JfTVNHKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGhhbmRsZUVycm9yRm4oZXJyKTtcblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZUNvbnRpbnVlUmVzcG9uc2UgKGNsaWVudDogUHJvdG9jb2xBcGksIGRhdGE6IFJlcXVlc3RQYXVzZWRFdmVudCB8IENvbnRpbnVlUmVzcG9uc2VSZXF1ZXN0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgaXNQYXVzZWRFdmVudCA9IGlzUmVxdWVzdFBhdXNlZEV2ZW50KGRhdGEpO1xuXG4gICAgYXdhaXQgY29ubmVjdGlvblJlc2V0R3VhcmQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJhbSA9IGlzUGF1c2VkRXZlbnRcbiAgICAgICAgICAgID8geyByZXF1ZXN0SWQ6IGRhdGEucmVxdWVzdElkIH1cbiAgICAgICAgICAgIDogZGF0YTtcblxuICAgICAgICBhd2FpdCBjbGllbnQuRmV0Y2guY29udGludWVSZXNwb25zZShwYXJhbSk7XG4gICAgfSwgZXJyID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gaXNQYXVzZWRFdmVudCA/ICclcicgOiAnJXMnO1xuXG4gICAgICAgIHJlcXVlc3RQaXBlbGluZUxvZ2dlcihgRmV0Y2guY29udGludWVSZXNwb25zZS4gVW5oYW5kbGVkIGVycm9yICVzIGR1cmluZyBwcm9jZXNzaW5nICR7Zm9ybWF0dGVyfWAsIGVyciwgZGF0YSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYWZlRnVsZmlsbFJlcXVlc3QgKGNsaWVudDogUHJvdG9jb2xBcGksIGZ1bGZpbGxJbmZvOiBGdWxmaWxsUmVxdWVzdFJlcXVlc3QpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBjb25uZWN0aW9uUmVzZXRHdWFyZChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5GZXRjaC5mdWxmaWxsUmVxdWVzdChmdWxmaWxsSW5mbyk7XG4gICAgfSwgZXJyID0+IHtcbiAgICAgICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyKGBGZXRjaC5mdWxmaWxsUmVxdWVzdC4gVW5oYW5kbGVkIGVycm9yICVzIGR1cmluZyBwcm9jZXNzaW5nICVzYCwgZXJyLCBmdWxmaWxsSW5mby5yZXF1ZXN0SWQpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZUNvbnRpbnVlUmVxdWVzdCAoY2xpZW50OiBQcm90b2NvbEFwaSwgZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgcG9zdERhdGE/IDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgY29ubmVjdGlvblJlc2V0R3VhcmQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBjbGllbnQuRmV0Y2guY29udGludWVSZXF1ZXN0KHsgcmVxdWVzdElkOiBldmVudC5yZXF1ZXN0SWQsIHBvc3REYXRhIH0pO1xuICAgIH0sIGVyciA9PiB7XG4gICAgICAgIHJlcXVlc3RQaXBlbGluZUxvZ2dlcihgRmV0Y2guY29udGludWVSZXF1ZXN0LiBVbmhhbmRsZWQgZXJyb3IgJXMgZHVyaW5nIHByb2Nlc3NpbmcgJXJgLCBlcnIsIGV2ZW50KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVGYWlsUmVxdWVzdCAoY2xpZW50OiBQcm90b2NvbEFwaSwgZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgZXJyb3JSZWFzb246IEVycm9yUmVhc29uID0gJ0Fib3J0ZWQnKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgY29ubmVjdGlvblJlc2V0R3VhcmQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBjbGllbnQuRmV0Y2guZmFpbFJlcXVlc3Qoe1xuICAgICAgICAgICAgcmVxdWVzdElkOiBldmVudC5yZXF1ZXN0SWQsXG4gICAgICAgICAgICBlcnJvclJlYXNvbixcbiAgICAgICAgfSk7XG4gICAgfSwgZXJyID0+IHtcbiAgICAgICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyKGBGZXRjaC5mYWlsUmVxdWVzdC4gVW5oYW5kbGVkIGVycm9yICVzIGR1cmluZyBwcm9jZXNzaW5nICVzYCwgZXJyLCBldmVudC5yZXF1ZXN0SWQpO1xuICAgIH0pO1xufVxuIl19