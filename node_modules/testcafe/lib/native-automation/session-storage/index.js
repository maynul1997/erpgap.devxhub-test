"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_base_1 = __importDefault(require("../api-base"));
const async_event_emitter_1 = __importDefault(require("../../utils/async-event-emitter"));
const NATIVE_AUTOMATION_STORAGE_BINDING = 'NATIVE_AUTOMATION_STORAGE_BINDING';
class SessionStorage extends api_base_1.default {
    constructor(browserId, client) {
        super(browserId, client);
        this._eventEmitter = new async_event_emitter_1.default();
        if (this._browserConnection.messageBus)
            this._addTestRunEventListeners(this._browserConnection.messageBus);
        this._browserConnection.on('message-bus-initialized', messageBus => {
            this._addTestRunEventListeners(messageBus);
        });
    }
    _addTestRunEventListeners(messageBus) {
        messageBus.on('test-run-done', testRun => {
            this._eventEmitter.emit('contextStorageTestRunDone', { testRunId: testRun.id });
        });
    }
    on(eventName, listener) {
        return this._eventEmitter.on(eventName, listener);
    }
    async init() {
        await this._client.Runtime.addBinding({ name: NATIVE_AUTOMATION_STORAGE_BINDING });
        await this._client.Runtime.on('bindingCalled', (event) => {
            if (event.name === NATIVE_AUTOMATION_STORAGE_BINDING) {
                const { testRunId, frameDriverId, data } = JSON.parse(event.payload);
                this._eventEmitter.emit('contextStorageSync', { sessionStorage: data, testRunId, frameDriverId });
            }
        });
    }
}
exports.default = SessionStorage;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmF0aXZlLWF1dG9tYXRpb24vc2Vzc2lvbi1zdG9yYWdlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsMkRBQWtEO0FBRWxELDBGQUFnRTtBQUloRSxNQUFNLGlDQUFpQyxHQUFHLG1DQUFtQyxDQUFDO0FBRTlFLE1BQXFCLGNBQWUsU0FBUSxrQkFBdUI7SUFHL0QsWUFBYSxTQUFpQixFQUFFLE1BQW1CO1FBQy9DLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDZCQUFpQixFQUFFLENBQUM7UUFFN0MsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVTtZQUNsQyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXZFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMseUJBQXlCLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDL0QsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLHlCQUF5QixDQUFFLFVBQXNCO1FBQ3JELFVBQVUsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BGLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEVBQUUsQ0FBRSxTQUFpQixFQUFFLFFBQWtDO1FBQzVELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUNiLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLGlDQUFpQyxFQUFFLENBQUMsQ0FBQztRQUVuRixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUF5QixFQUFFLEVBQUU7WUFDekUsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGlDQUFpQyxFQUFFO2dCQUNsRCxNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFckUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO2FBQ3JHO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFyQ0QsaUNBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdG9jb2xBcGkgfSBmcm9tICdjaHJvbWUtcmVtb3RlLWludGVyZmFjZSc7XG5pbXBvcnQgUHJvdG9jb2wgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wnO1xuaW1wb3J0IE5hdGl2ZUF1dG9tYXRpb25BcGlCYXNlIGZyb20gJy4uL2FwaS1iYXNlJztcbmltcG9ydCBCaW5kaW5nQ2FsbGVkRXZlbnQgPSBQcm90b2NvbC5SdW50aW1lLkJpbmRpbmdDYWxsZWRFdmVudDtcbmltcG9ydCBBc3luY0V2ZW50RW1pdHRlciBmcm9tICcuLi8uLi91dGlscy9hc3luYy1ldmVudC1lbWl0dGVyJztcbmltcG9ydCBFbWl0dGVyeSBmcm9tICdlbWl0dGVyeSc7XG5pbXBvcnQgTWVzc2FnZUJ1cyBmcm9tICcuLi8uLi91dGlscy9tZXNzYWdlLWJ1cyc7XG5cbmNvbnN0IE5BVElWRV9BVVRPTUFUSU9OX1NUT1JBR0VfQklORElORyA9ICdOQVRJVkVfQVVUT01BVElPTl9TVE9SQUdFX0JJTkRJTkcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXNzaW9uU3RvcmFnZSBleHRlbmRzIE5hdGl2ZUF1dG9tYXRpb25BcGlCYXNlIHtcbiAgICBwcml2YXRlIF9ldmVudEVtaXR0ZXI6IEFzeW5jRXZlbnRFbWl0dGVyO1xuXG4gICAgY29uc3RydWN0b3IgKGJyb3dzZXJJZDogc3RyaW5nLCBjbGllbnQ6IFByb3RvY29sQXBpKSB7XG4gICAgICAgIHN1cGVyKGJyb3dzZXJJZCwgY2xpZW50KTtcblxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIgPSBuZXcgQXN5bmNFdmVudEVtaXR0ZXIoKTtcblxuICAgICAgICBpZiAodGhpcy5fYnJvd3NlckNvbm5lY3Rpb24ubWVzc2FnZUJ1cylcbiAgICAgICAgICAgIHRoaXMuX2FkZFRlc3RSdW5FdmVudExpc3RlbmVycyh0aGlzLl9icm93c2VyQ29ubmVjdGlvbi5tZXNzYWdlQnVzKTtcblxuICAgICAgICB0aGlzLl9icm93c2VyQ29ubmVjdGlvbi5vbignbWVzc2FnZS1idXMtaW5pdGlhbGl6ZWQnLCBtZXNzYWdlQnVzID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFRlc3RSdW5FdmVudExpc3RlbmVycyhtZXNzYWdlQnVzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYWRkVGVzdFJ1bkV2ZW50TGlzdGVuZXJzIChtZXNzYWdlQnVzOiBNZXNzYWdlQnVzKTogdm9pZCB7XG4gICAgICAgIG1lc3NhZ2VCdXMub24oJ3Rlc3QtcnVuLWRvbmUnLCB0ZXN0UnVuID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5lbWl0KCdjb250ZXh0U3RvcmFnZVRlc3RSdW5Eb25lJywgeyB0ZXN0UnVuSWQ6IHRlc3RSdW4uaWQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbiAoZXZlbnROYW1lOiBzdHJpbmcsIGxpc3RlbmVyOiAoZXZlbnREYXRhPzogYW55KSA9PiBhbnkpOiBFbWl0dGVyeS5VbnN1YnNjcmliZUZuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50RW1pdHRlci5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2NsaWVudC5SdW50aW1lLmFkZEJpbmRpbmcoeyBuYW1lOiBOQVRJVkVfQVVUT01BVElPTl9TVE9SQUdFX0JJTkRJTkcgfSk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5fY2xpZW50LlJ1bnRpbWUub24oJ2JpbmRpbmdDYWxsZWQnLCAoZXZlbnQ6IEJpbmRpbmdDYWxsZWRFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT09IE5BVElWRV9BVVRPTUFUSU9OX1NUT1JBR0VfQklORElORykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGVzdFJ1bklkLCBmcmFtZURyaXZlcklkLCBkYXRhIH0gPSBKU09OLnBhcnNlKGV2ZW50LnBheWxvYWQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmVtaXQoJ2NvbnRleHRTdG9yYWdlU3luYycsIHsgc2Vzc2lvblN0b3JhZ2U6IGRhdGEsIHRlc3RSdW5JZCwgZnJhbWVEcml2ZXJJZCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19