"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestPipelineOtherRequestLogger = exports.requestPipelineServiceRequestLogger = exports.requestPipelineInternalRequestLogger = exports.requestPipelineMockLogger = exports.requestHooksEventProviderLogger = exports.chromeBrowserProviderLogger = exports.resourceInjectorLogger = exports.requestPipelineLogger = exports.nativeAutomationLogger = void 0;
const debug_1 = __importDefault(require("debug"));
const testcafeLogger = (0, debug_1.default)('testcafe');
const nativeAutomationLogger = testcafeLogger.extend('native-automation');
exports.nativeAutomationLogger = nativeAutomationLogger;
const requestPipelineLogger = nativeAutomationLogger.extend('request-pipeline');
exports.requestPipelineLogger = requestPipelineLogger;
const requestPipelineMockLogger = requestPipelineLogger.extend('mock');
exports.requestPipelineMockLogger = requestPipelineMockLogger;
const requestPipelineInternalRequestLogger = requestPipelineLogger.extend('internal-request');
exports.requestPipelineInternalRequestLogger = requestPipelineInternalRequestLogger;
const requestPipelineServiceRequestLogger = requestPipelineLogger.extend('service-request');
exports.requestPipelineServiceRequestLogger = requestPipelineServiceRequestLogger;
const requestPipelineOtherRequestLogger = requestPipelineLogger.extend('other-request');
exports.requestPipelineOtherRequestLogger = requestPipelineOtherRequestLogger;
const resourceInjectorLogger = nativeAutomationLogger.extend('resource-injector');
exports.resourceInjectorLogger = resourceInjectorLogger;
const requestHooksLogger = nativeAutomationLogger.extend('request-hooks');
const requestHooksEventProviderLogger = requestHooksLogger.extend('event-provider');
exports.requestHooksEventProviderLogger = requestHooksEventProviderLogger;
const browserLogger = testcafeLogger.extend('browser');
const browserProviderLogger = browserLogger.extend('provider');
const chromeBrowserProviderLogger = browserProviderLogger.extend('chrome');
exports.chromeBrowserProviderLogger = chromeBrowserProviderLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWJ1Zy1sb2dnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixNQUFNLGNBQWMsR0FBRyxJQUFBLGVBQUssRUFBQyxVQUFVLENBQUMsQ0FBQztBQUV6QyxNQUFNLHNCQUFzQixHQUFpQixjQUFjLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFlcEYsd0RBQXNCO0FBZDFCLE1BQU0scUJBQXFCLEdBQWtCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBZTNGLHNEQUFxQjtBQWR6QixNQUFNLHlCQUF5QixHQUFjLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQWtCOUUsOERBQXlCO0FBakI3QixNQUFNLG9DQUFvQyxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBa0IxRixvRkFBb0M7QUFqQnhDLE1BQU0sbUNBQW1DLEdBQUkscUJBQXFCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFrQnpGLGtGQUFtQztBQWpCdkMsTUFBTSxpQ0FBaUMsR0FBTSxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFrQnZGLDhFQUFpQztBQWpCckMsTUFBTSxzQkFBc0IsR0FBaUIsc0JBQXNCLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFXNUYsd0RBQXNCO0FBVjFCLE1BQU0sa0JBQWtCLEdBQXFCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM1RixNQUFNLCtCQUErQixHQUFRLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBV3JGLDBFQUErQjtBQVRuQyxNQUFNLGFBQWEsR0FBaUIsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyRSxNQUFNLHFCQUFxQixHQUFTLGFBQWEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckUsTUFBTSwyQkFBMkIsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFNdkUsa0VBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcblxuY29uc3QgdGVzdGNhZmVMb2dnZXIgPSBkZWJ1ZygndGVzdGNhZmUnKTtcblxuY29uc3QgbmF0aXZlQXV0b21hdGlvbkxvZ2dlciAgICAgICAgICAgICAgID0gdGVzdGNhZmVMb2dnZXIuZXh0ZW5kKCduYXRpdmUtYXV0b21hdGlvbicpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyICAgICAgICAgICAgICAgID0gbmF0aXZlQXV0b21hdGlvbkxvZ2dlci5leHRlbmQoJ3JlcXVlc3QtcGlwZWxpbmUnKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZU1vY2tMb2dnZXIgICAgICAgICAgICA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ21vY2snKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZUludGVybmFsUmVxdWVzdExvZ2dlciA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ2ludGVybmFsLXJlcXVlc3QnKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZVNlcnZpY2VSZXF1ZXN0TG9nZ2VyICA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ3NlcnZpY2UtcmVxdWVzdCcpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lT3RoZXJSZXF1ZXN0TG9nZ2VyICAgID0gcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLmV4dGVuZCgnb3RoZXItcmVxdWVzdCcpO1xuY29uc3QgcmVzb3VyY2VJbmplY3RvckxvZ2dlciAgICAgICAgICAgICAgID0gbmF0aXZlQXV0b21hdGlvbkxvZ2dlci5leHRlbmQoJ3Jlc291cmNlLWluamVjdG9yJyk7XG5jb25zdCByZXF1ZXN0SG9va3NMb2dnZXIgICAgICAgICAgICAgICAgICAgPSBuYXRpdmVBdXRvbWF0aW9uTG9nZ2VyLmV4dGVuZCgncmVxdWVzdC1ob29rcycpO1xuY29uc3QgcmVxdWVzdEhvb2tzRXZlbnRQcm92aWRlckxvZ2dlciAgICAgID0gcmVxdWVzdEhvb2tzTG9nZ2VyLmV4dGVuZCgnZXZlbnQtcHJvdmlkZXInKTtcblxuY29uc3QgYnJvd3NlckxvZ2dlciAgICAgICAgICAgICAgID0gdGVzdGNhZmVMb2dnZXIuZXh0ZW5kKCdicm93c2VyJyk7XG5jb25zdCBicm93c2VyUHJvdmlkZXJMb2dnZXIgICAgICAgPSBicm93c2VyTG9nZ2VyLmV4dGVuZCgncHJvdmlkZXInKTtcbmNvbnN0IGNocm9tZUJyb3dzZXJQcm92aWRlckxvZ2dlciA9IGJyb3dzZXJQcm92aWRlckxvZ2dlci5leHRlbmQoJ2Nocm9tZScpO1xuXG5leHBvcnQge1xuICAgIG5hdGl2ZUF1dG9tYXRpb25Mb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLFxuICAgIHJlc291cmNlSW5qZWN0b3JMb2dnZXIsXG4gICAgY2hyb21lQnJvd3NlclByb3ZpZGVyTG9nZ2VyLFxuICAgIHJlcXVlc3RIb29rc0V2ZW50UHJvdmlkZXJMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lTW9ja0xvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVJbnRlcm5hbFJlcXVlc3RMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lU2VydmljZVJlcXVlc3RMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lT3RoZXJSZXF1ZXN0TG9nZ2VyLFxufTtcbiJdfQ==