"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUserAgent = exports.calculatePrettyUserAgent = void 0;
const bowser_1 = __importDefault(require("bowser"));
const DEFAULT_NAME = 'Other';
const DEFAULT_VERSION = '0.0';
const DEFAULT_PLATFORM_TYPE = DEFAULT_NAME.toLowerCase();
const EMPTY_PARSED_USER_AGENT = bowser_1.default.parse(' ');
function calculateBrowser(browserDetails) {
    return {
        name: browserDetails.name || DEFAULT_NAME,
        version: browserDetails.version || DEFAULT_VERSION,
    };
}
function calculateOs(parsedOsDetails) {
    const name = parsedOsDetails.name || DEFAULT_NAME;
    let version = DEFAULT_VERSION;
    // NOTE: a 'versionName' property value is more readable in the case of Windows (GH-481):
    // Windows 8.1: os.version: "NT 6.3", os.versionName: "8.1".
    if (name.toLowerCase() === 'windows') {
        if (parsedOsDetails.versionName)
            version = parsedOsDetails.versionName;
    }
    else if (parsedOsDetails.version)
        version = parsedOsDetails.version;
    return { name, version };
}
function calculateEngine(engineDetails) {
    return {
        name: engineDetails.name || DEFAULT_NAME,
        version: engineDetails.version || DEFAULT_VERSION,
    };
}
function calculatePrettyUserAgent(browser, os) {
    return `${browser.name} ${browser.version} / ${os.name} ${os.version}`;
}
exports.calculatePrettyUserAgent = calculatePrettyUserAgent;
function parseUserAgent(userAgent = '', osInfo) {
    const parsedUserAgent = userAgent ? bowser_1.default.parse(userAgent) : EMPTY_PARSED_USER_AGENT;
    const browser = calculateBrowser(parsedUserAgent.browser);
    const os = osInfo || calculateOs(parsedUserAgent.os);
    const engine = calculateEngine(parsedUserAgent.engine);
    const prettyUserAgent = calculatePrettyUserAgent(browser, os);
    return {
        name: browser.name,
        version: browser.version,
        platform: parsedUserAgent.platform.type || DEFAULT_PLATFORM_TYPE,
        os,
        engine,
        prettyUserAgent: prettyUserAgent,
        userAgent,
    };
}
exports.parseUserAgent = parseUserAgent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtdXNlci1hZ2VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wYXJzZS11c2VyLWFnZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9EQUE0QjtBQUc1QixNQUFNLFlBQVksR0FBYyxPQUFPLENBQUM7QUFDeEMsTUFBTSxlQUFlLEdBQVcsS0FBSyxDQUFDO0FBQ3RDLE1BQU0scUJBQXFCLEdBQUssWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzNELE1BQU0sdUJBQXVCLEdBQUcsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFpQmxELFNBQVMsZ0JBQWdCLENBQUUsY0FBNEM7SUFDbkUsT0FBTztRQUNILElBQUksRUFBSyxjQUFjLENBQUMsSUFBSSxJQUFJLFlBQVk7UUFDNUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxPQUFPLElBQUksZUFBZTtLQUNyRCxDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFFLGVBQXdDO0lBQzFELE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLElBQUksWUFBWSxDQUFDO0lBRWxELElBQUksT0FBTyxHQUFHLGVBQWUsQ0FBQztJQUU5Qix5RkFBeUY7SUFDekYsNERBQTREO0lBQzVELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLFNBQVMsRUFBRTtRQUNsQyxJQUFJLGVBQWUsQ0FBQyxXQUFXO1lBQzNCLE9BQU8sR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDO0tBQzdDO1NBQ0ksSUFBSSxlQUFlLENBQUMsT0FBTztRQUM1QixPQUFPLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQztJQUV0QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBRSxhQUEwQztJQUNoRSxPQUFPO1FBQ0gsSUFBSSxFQUFLLGFBQWEsQ0FBQyxJQUFJLElBQUksWUFBWTtRQUMzQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU8sSUFBSSxlQUFlO0tBQ3BELENBQUM7QUFDTixDQUFDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUUsT0FBd0IsRUFBRSxFQUFtQjtJQUNuRixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxNQUFNLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzNFLENBQUM7QUFGRCw0REFFQztBQUVELFNBQWdCLGNBQWMsQ0FBRSxTQUFTLEdBQUcsRUFBRSxFQUFFLE1BQWU7SUFDM0QsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUM7SUFDdEYsTUFBTSxPQUFPLEdBQVcsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sRUFBRSxHQUFnQixNQUFNLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRSxNQUFNLE1BQU0sR0FBWSxlQUFlLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sZUFBZSxHQUFHLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU5RCxPQUFPO1FBQ0gsSUFBSSxFQUFhLE9BQU8sQ0FBQyxJQUFJO1FBQzdCLE9BQU8sRUFBVSxPQUFPLENBQUMsT0FBTztRQUNoQyxRQUFRLEVBQVMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUkscUJBQXFCO1FBQ3ZFLEVBQUU7UUFDRixNQUFNO1FBQ04sZUFBZSxFQUFFLGVBQWU7UUFDaEMsU0FBUztLQUNaLENBQUM7QUFDTixDQUFDO0FBaEJELHdDQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3dzZXIgZnJvbSAnYm93c2VyJztcbmltcG9ydCB7IE9TSW5mbyB9IGZyb20gJ2dldC1vcy1pbmZvJztcblxuY29uc3QgREVGQVVMVF9OQU1FICAgICAgICAgICAgPSAnT3RoZXInO1xuY29uc3QgREVGQVVMVF9WRVJTSU9OICAgICAgICAgPSAnMC4wJztcbmNvbnN0IERFRkFVTFRfUExBVEZPUk1fVFlQRSAgID0gREVGQVVMVF9OQU1FLnRvTG93ZXJDYXNlKCk7XG5jb25zdCBFTVBUWV9QQVJTRURfVVNFUl9BR0VOVCA9IEJvd3Nlci5wYXJzZSgnICcpO1xuXG5pbnRlcmZhY2UgUGFyc2VkQ29tcG9uZW50IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmVyc2lvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFVzZXJBZ2VudCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZlcnNpb246IHN0cmluZztcbiAgICBwbGF0Zm9ybTogc3RyaW5nO1xuICAgIG9zOiBQYXJzZWRDb21wb25lbnQ7XG4gICAgZW5naW5lOiBQYXJzZWRDb21wb25lbnQ7XG4gICAgcHJldHR5VXNlckFnZW50OiBzdHJpbmc7XG4gICAgdXNlckFnZW50OiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUJyb3dzZXIgKGJyb3dzZXJEZXRhaWxzOiBCb3dzZXIuUGFyc2VyLkJyb3dzZXJEZXRhaWxzKTogUGFyc2VkQ29tcG9uZW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAgICBicm93c2VyRGV0YWlscy5uYW1lIHx8IERFRkFVTFRfTkFNRSxcbiAgICAgICAgdmVyc2lvbjogYnJvd3NlckRldGFpbHMudmVyc2lvbiB8fCBERUZBVUxUX1ZFUlNJT04sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlT3MgKHBhcnNlZE9zRGV0YWlsczogQm93c2VyLlBhcnNlci5PU0RldGFpbHMpOiBQYXJzZWRDb21wb25lbnQge1xuICAgIGNvbnN0IG5hbWUgPSBwYXJzZWRPc0RldGFpbHMubmFtZSB8fCBERUZBVUxUX05BTUU7XG5cbiAgICBsZXQgdmVyc2lvbiA9IERFRkFVTFRfVkVSU0lPTjtcblxuICAgIC8vIE5PVEU6IGEgJ3ZlcnNpb25OYW1lJyBwcm9wZXJ0eSB2YWx1ZSBpcyBtb3JlIHJlYWRhYmxlIGluIHRoZSBjYXNlIG9mIFdpbmRvd3MgKEdILTQ4MSk6XG4gICAgLy8gV2luZG93cyA4LjE6IG9zLnZlcnNpb246IFwiTlQgNi4zXCIsIG9zLnZlcnNpb25OYW1lOiBcIjguMVwiLlxuICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd3aW5kb3dzJykge1xuICAgICAgICBpZiAocGFyc2VkT3NEZXRhaWxzLnZlcnNpb25OYW1lKVxuICAgICAgICAgICAgdmVyc2lvbiA9IHBhcnNlZE9zRGV0YWlscy52ZXJzaW9uTmFtZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyc2VkT3NEZXRhaWxzLnZlcnNpb24pXG4gICAgICAgIHZlcnNpb24gPSBwYXJzZWRPc0RldGFpbHMudmVyc2lvbjtcblxuICAgIHJldHVybiB7IG5hbWUsIHZlcnNpb24gfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRW5naW5lIChlbmdpbmVEZXRhaWxzOiBCb3dzZXIuUGFyc2VyLkVuZ2luZURldGFpbHMpOiBQYXJzZWRDb21wb25lbnQge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICAgIGVuZ2luZURldGFpbHMubmFtZSB8fCBERUZBVUxUX05BTUUsXG4gICAgICAgIHZlcnNpb246IGVuZ2luZURldGFpbHMudmVyc2lvbiB8fCBERUZBVUxUX1ZFUlNJT04sXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVByZXR0eVVzZXJBZ2VudCAoYnJvd3NlcjogUGFyc2VkQ29tcG9uZW50LCBvczogUGFyc2VkQ29tcG9uZW50KTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7YnJvd3Nlci5uYW1lfSAke2Jyb3dzZXIudmVyc2lvbn0gLyAke29zLm5hbWV9ICR7b3MudmVyc2lvbn1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVc2VyQWdlbnQgKHVzZXJBZ2VudCA9ICcnLCBvc0luZm8/OiBPU0luZm8pOiBQYXJzZWRVc2VyQWdlbnQge1xuICAgIGNvbnN0IHBhcnNlZFVzZXJBZ2VudCA9IHVzZXJBZ2VudCA/IEJvd3Nlci5wYXJzZSh1c2VyQWdlbnQpIDogRU1QVFlfUEFSU0VEX1VTRVJfQUdFTlQ7XG4gICAgY29uc3QgYnJvd3NlciAgICAgICAgID0gY2FsY3VsYXRlQnJvd3NlcihwYXJzZWRVc2VyQWdlbnQuYnJvd3Nlcik7XG4gICAgY29uc3Qgb3MgICAgICAgICAgICAgID0gb3NJbmZvIHx8IGNhbGN1bGF0ZU9zKHBhcnNlZFVzZXJBZ2VudC5vcyk7XG4gICAgY29uc3QgZW5naW5lICAgICAgICAgID0gY2FsY3VsYXRlRW5naW5lKHBhcnNlZFVzZXJBZ2VudC5lbmdpbmUpO1xuICAgIGNvbnN0IHByZXR0eVVzZXJBZ2VudCA9IGNhbGN1bGF0ZVByZXR0eVVzZXJBZ2VudChicm93c2VyLCBvcyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAgICAgICAgICAgIGJyb3dzZXIubmFtZSxcbiAgICAgICAgdmVyc2lvbjogICAgICAgICBicm93c2VyLnZlcnNpb24sXG4gICAgICAgIHBsYXRmb3JtOiAgICAgICAgcGFyc2VkVXNlckFnZW50LnBsYXRmb3JtLnR5cGUgfHwgREVGQVVMVF9QTEFURk9STV9UWVBFLFxuICAgICAgICBvcyxcbiAgICAgICAgZW5naW5lLFxuICAgICAgICBwcmV0dHlVc2VyQWdlbnQ6IHByZXR0eVVzZXJBZ2VudCxcbiAgICAgICAgdXNlckFnZW50LFxuICAgIH07XG59XG4iXX0=